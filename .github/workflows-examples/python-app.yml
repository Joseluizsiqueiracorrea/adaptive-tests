# Example workflow for Python applications
name: Python App - Adaptive Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run adaptive tests for Python
    - name: Run Adaptive Tests
      uses: adaptive-tests-action/adaptive-tests@v1
      with:
        command: test
        language: python
        test-pattern: '**/test_*.py'

    # Discover Python classes and functions
    - name: Discover Python Components
      uses: adaptive-tests-action/adaptive-tests@v1
      with:
        command: discover
        language: python
        discovery-signature: |
          {
            "type": "class",
            "module": "src.services",
            "hasDecorator": "dataclass"
          }

    # Validate all discovered components still exist
    - name: Validate Discovery
      uses: adaptive-tests-action/adaptive-tests@v1
      with:
        command: validate
        language: python
        fail-on-missing: true