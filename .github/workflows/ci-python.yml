name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'languages/python/**'
      - '.github/workflows/ci-python.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'languages/python/**'
      - '.github/workflows/ci-python.yml'

permissions:
  contents: read

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    defaults:
      run:
        working-directory: languages/python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov pytest-asyncio
          pip install -e .

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Run examples
        run: |
          cd examples
          python -m pytest -v

      - name: Test discovery functionality
        run: |
          echo "üîç Testing Python discovery..."
          python -c "from adaptive_tests import discover; print('‚úÖ Discovery loaded successfully')"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./languages/python/coverage.xml
          flags: python
          name: python-coverage

  python-linting:
    name: Python Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: languages/python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run black (formatting check)
        run: black --check --diff src/ tests/ || true

      - name: Run isort (import sorting check)
        run: isort --check-only --diff src/ tests/ || true

      - name: Run flake8 (linting)
        run: flake8 src/ tests/ || true

      - name: Run mypy (type checking)
        run: mypy src/ || true

  python-security:
    name: Python Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: languages/python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          echo "üîí Running Python security scan..."
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json || true
          fi

      - name: Run bandit security linter
        run: |
          echo "üîí Running bandit security analysis..."
          bandit -r src/ -f json || true

  python-compatibility:
    name: Python Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.12']

    defaults:
      run:
        working-directory: languages/python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest
          pip install -e .

      - name: Run basic tests
        run: python -m pytest tests/ -v --tb=short