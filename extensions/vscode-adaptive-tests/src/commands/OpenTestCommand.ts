import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

export class OpenTestCommand {
    /**
     * Open the corresponding test file for a source file
     */
    public async execute(uri?: vscode.Uri) {
        try {
            // Get the file path
            const filePath = uri ? uri.fsPath : vscode.window.activeTextEditor?.document.uri.fsPath;

            if (!filePath) {
                vscode.window.showErrorMessage('No file selected.');
                return;
            }

            // Get workspace root
            const workspaceFolder = vscode.workspace.getWorkspaceFolder(vscode.Uri.file(filePath));
            if (!workspaceFolder) {
                vscode.window.showErrorMessage('File is not in a workspace folder.');
                return;
            }

            // Find the test file
            const testFile = await this.findTestFile(filePath, workspaceFolder.uri.fsPath);

            if (!testFile) {
                // No test found, offer to scaffold
                const action = await vscode.window.showWarningMessage(
                    'No test file found for this source file.',
                    'Scaffold Test',
                    'Cancel'
                );

                if (action === 'Scaffold Test') {
                    await vscode.commands.executeCommand('adaptive-tests.scaffoldFile', uri);
                }
                return;
            }

            // Open the test file
            const doc = await vscode.workspace.openTextDocument(testFile);
            await vscode.window.showTextDocument(doc);

            // Show message with test location
            const relativePath = path.relative(workspaceFolder.uri.fsPath, testFile);
            vscode.window.setStatusBarMessage(`Opened test: ${relativePath}`, 3000);

        } catch (error: any) {
            vscode.window.showErrorMessage(`Failed to open test file: ${error.message}`);
            console.error('Open test error:', error);
        }
    }

    /**
     * Find the test file for a given source file
     */
    public async findTestFile(
        sourcePath: string,
        workspaceRoot: string
    ): Promise<string | null> {
        const fileName = path.basename(sourcePath, path.extname(sourcePath));
        const ext = path.extname(sourcePath);

        // Get configuration
        const config = vscode.workspace.getConfiguration('adaptive-tests');
        const testDir = config.get<string>('scaffold.outputDirectory', 'tests/adaptive');

        // Map source extensions to test extensions
        const testExtensions = this.getTestExtensions(ext);

        // Patterns to check (in priority order)
        const patterns = [
            // In configured test directory
            ...testExtensions.map(testExt =>
                path.join(workspaceRoot, testDir, `${fileName}.test${testExt}`)
            ),
            ...testExtensions.map(testExt =>
                path.join(workspaceRoot, testDir, `${fileName}.spec${testExt}`)
            ),

            // In standard test directories
            ...testExtensions.map(testExt =>
                path.join(workspaceRoot, 'tests', `${fileName}.test${testExt}`)
            ),
            ...testExtensions.map(testExt =>
                path.join(workspaceRoot, '__tests__', `${fileName}.test${testExt}`)
            ),
            ...testExtensions.map(testExt =>
                path.join(workspaceRoot, 'test', `${fileName}.test${testExt}`)
            ),

            // Co-located with source file
            ...testExtensions.map(testExt =>
                path.join(path.dirname(sourcePath), `${fileName}.test${testExt}`)
            ),
            ...testExtensions.map(testExt =>
                path.join(path.dirname(sourcePath), `${fileName}.spec${testExt}`)
            ),

            // In __tests__ subdirectory relative to source
            ...testExtensions.map(testExt =>
                path.join(path.dirname(sourcePath), '__tests__', `${fileName}.test${testExt}`)
            ),
        ];

        // Special handling for PHP files
        if (ext === '.php') {
            patterns.push(
                path.join(workspaceRoot, 'tests', `${fileName}Test.php`),
                path.join(workspaceRoot, 'tests', 'Unit', `${fileName}Test.php`),
                path.join(workspaceRoot, 'tests', 'Feature', `${fileName}Test.php`)
            );
        }

        // Special handling for Go files
        if (ext === '.go') {
            // Go tests should be in the same directory with _test.go suffix
            const sourceDir = path.dirname(sourcePath);
            patterns.unshift(
                path.join(sourceDir, `${fileName}_test.go`)
            );
        }

        // Special handling for Java files
        if (ext === '.java') {
            // Convert src/main/java to src/test/java
            const testPath = sourcePath.replace('/src/main/java/', '/src/test/java/');
            patterns.unshift(
                testPath.replace('.java', 'Test.java'),
                testPath.replace('.java', 'Tests.java'),
                testPath.replace('.java', 'Spec.java')
            );
        }

        // Special handling for Rust files
        if (ext === '.rs') {
            // Rust tests should be in the same directory with _test.rs suffix
            const sourceDir = path.dirname(sourcePath);
            patterns.unshift(
                path.join(sourceDir, `${fileName}_test.rs`)
            );
        }

        // Check each pattern
        for (const pattern of patterns) {
            try {
                await fs.promises.access(pattern, fs.constants.F_OK);
                return pattern;
            } catch {
                // File doesn't exist, continue
            }
        }

        return null;
    }

    /**
     * Check if a test file exists for the given source file
     */
    public async hasTest(sourcePath: string): Promise<boolean> {
        const workspaceFolder = vscode.workspace.getWorkspaceFolder(vscode.Uri.file(sourcePath));
        if (!workspaceFolder) {
            return false;
        }

        const testFile = await this.findTestFile(sourcePath, workspaceFolder.uri.fsPath);
        return testFile !== null;
    }

    private getTestExtensions(sourceExt: string): string[] {
        switch (sourceExt) {
            case '.ts':
            case '.tsx':
                return ['.ts', '.js']; // TypeScript tests or compiled JavaScript tests
            case '.js':
            case '.jsx':
                return ['.js', '.ts']; // JavaScript tests or TypeScript tests
            case '.php':
                return ['.php'];
            case '.java':
                return ['.java'];
            case '.go':
                return ['.go'];
            case '.py':
                return ['.py'];
            case '.rs':
                return ['.rs'];
            default:
                return [sourceExt];
        }
    }
}